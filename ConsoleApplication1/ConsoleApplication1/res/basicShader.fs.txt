#version 330

in vec2 texCoord0;
in vec3 toLightVector;
in vec3 normalVector;
in vec3 toCameraVector;
in float visibility;
out vec4 outColor;
uniform sampler2D texture;
uniform vec3 lightColor;
uniform float reflectivity;
uniform float shaderDump;
uniform vec3 skyColor;

void main()
{
	vec3 unitNormalVector = normalize(normalVector);
	vec3 unitToLightVector = normalize(toLightVector);
	float dotProduct = dot(unitToLightVector, unitNormalVector);
	float brightness = max(dotProduct, 0.2);
	vec3 diffuse = brightness * lightColor;
	

	vec3 lightDirection = -unitToLightVector; 
	vec3 reflectedLight = reflect(lightDirection, unitNormalVector);
	float specularFactor = dot(normalize(toCameraVector), reflectedLight);
	specularFactor = max(specularFactor, 0.0);
	float dumpFactor = pow(specularFactor , shaderDump);
	vec3 finalSpecular = dumpFactor * lightColor;

	vec4 texColor = texture2D(texture, texCoord0);
	if (texColor.a < 0.5)
	{
		discard;
	}

	outColor = vec4(diffuse, 1.0) * texColor + vec4(finalSpecular, 1.0);
	outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}