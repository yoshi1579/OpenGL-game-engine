#version 330

in vec2 texCoord0;
in vec3 toLightVector[4];
in vec3 normalVector;
in vec3 toCameraVector;
in float visibility;
out vec4 outColor;
uniform sampler2D texture;
uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float reflectivity;
uniform float shaderDump;
uniform vec3 skyColor;

void main()
{
	vec3 unitNormalVector = normalize(normalVector);
	vec3 totalSpecular = vec3(0.0);
	vec3 totalDiffuse = vec3(0.0);
	float lightAttenu = 1;
	for (int i = 0; i < 4; i++)
	{
		float distance = length(toLightVector[i]);
		lightAttenu = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitToLightVector = normalize(toLightVector[i]);
		float dotProduct = dot(unitToLightVector, unitNormalVector);
		float brightness = max(dotProduct, 0.0);
		vec3 lightDirection = -unitToLightVector; 
		vec3 reflectedLight = reflect(lightDirection, unitNormalVector);
		float specularFactor = dot(normalize(toCameraVector), reflectedLight);
		specularFactor = max(specularFactor, 0.0);
		float dumpFactor = pow(specularFactor , shaderDump);

		totalSpecular = totalSpecular + (dumpFactor * lightColor[i] / lightAttenu);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i] / lightAttenu);
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 texColor = texture2D(texture, texCoord0);
	if (texColor.a < 0.5)
	{
		discard;
	}

	outColor = vec4(totalDiffuse, 1.0) * texColor + vec4(totalSpecular, 1.0);
	outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}