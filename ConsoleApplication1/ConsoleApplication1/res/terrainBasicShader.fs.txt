#version 330

in vec2 texCoord0;
in vec3 toLightVector[4];
in vec3 normalVector;
in vec3 toCameraVector;
in float visibility;
out vec4 outColor;

uniform sampler2D grassTexture;
uniform sampler2D dirtTexture;
uniform sampler2D flowerTexture;
uniform sampler2D tileTexture;
uniform sampler2D blendMapTexture;

uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float reflectivity;
uniform float shaderDump;
uniform vec3 skyColor;

void main()
{
	vec3 totalDiffuse = vec3(0.0);
	float lightAttenu = 1;
	for (int i = 0; i < 4; i++)
	{
		float distance = length(toLightVector[i]);
		lightAttenu = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitNormalVector = normalize(normalVector);
		vec3 unitToLightVector = normalize(toLightVector[i]);
		float dotProduct = dot(unitToLightVector, unitNormalVector);
		float brightness = max(dotProduct, 0.0);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i] / lightAttenu);
	}
	totalDiffuse = max(totalDiffuse, 0.2);

	vec4 blendMapColor = texture2D(blendMapTexture, texCoord0);
	float backgroundAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 texCoord = texCoord0 * 40;
	vec4 backgroundColor = texture2D(grassTexture, texCoord) * 1;
	vec4 dirtColor = texture2D(dirtTexture, texCoord) * blendMapColor.r;
	vec4 flowerColor = texture2D(flowerTexture, texCoord) * blendMapColor.g;
	vec4 tileColor = texture2D(tileTexture, texCoord)* blendMapColor.b;
	vec4 finalColor = backgroundColor + dirtColor + flowerColor + tileColor;
	
	outColor = vec4(totalDiffuse, 1.0) * finalColor;
	outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}